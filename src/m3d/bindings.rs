/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const M3D_APIVERSION: u32 = 256;
pub const M3D_UNDEF: u32 = 4294967295;
pub const M3D_INDEXMAX: u32 = 4294967294;
pub const M3D_VOXUNDEF: u32 = 65535;
pub const M3D_VOXCLEAR: u32 = 65534;
pub const M3D_NOTDEFINED: u32 = 4294967295;
pub const M3D_NUMBONE: u32 = 4;
pub const M3D_BONEMAXLEVEL: u32 = 8;
pub const M3D_CMDMAXARG: u32 = 8;
pub const M3D_FLG_FREERAW: u32 = 1;
pub const M3D_FLG_FREESTR: u32 = 2;
pub const M3D_FLG_MTLLIB: u32 = 4;
pub const M3D_FLG_GENNORM: u32 = 8;
pub const M3D_EXP_INT8: u32 = 0;
pub const M3D_EXP_INT16: u32 = 1;
pub const M3D_EXP_FLOAT: u32 = 2;
pub const M3D_EXP_DOUBLE: u32 = 3;
pub const M3D_EXP_NOCMAP: u32 = 1;
pub const M3D_EXP_NOMATERIAL: u32 = 2;
pub const M3D_EXP_NOFACE: u32 = 4;
pub const M3D_EXP_NONORMAL: u32 = 8;
pub const M3D_EXP_NOTXTCRD: u32 = 16;
pub const M3D_EXP_FLIPTXTCRD: u32 = 32;
pub const M3D_EXP_NORECALC: u32 = 64;
pub const M3D_EXP_IDOSUCK: u32 = 128;
pub const M3D_EXP_NOBONE: u32 = 256;
pub const M3D_EXP_NOACTION: u32 = 512;
pub const M3D_EXP_INLINE: u32 = 1024;
pub const M3D_EXP_EXTRA: u32 = 2048;
pub const M3D_EXP_NOZLIB: u32 = 16384;
pub const M3D_EXP_ASCII: u32 = 32768;
pub const M3D_EXP_NOVRTMAX: u32 = 65536;
pub const M3D_SUCCESS: u32 = 0;
pub const M3D_ERR_ALLOC: i32 = -1;
pub const M3D_ERR_BADFILE: i32 = -2;
pub const M3D_ERR_UNIMPL: i32 = -65;
pub const M3D_ERR_UNKPROP: i32 = -66;
pub const M3D_ERR_UNKMESH: i32 = -67;
pub const M3D_ERR_UNKIMG: i32 = -68;
pub const M3D_ERR_UNKFRAME: i32 = -69;
pub const M3D_ERR_UNKCMD: i32 = -70;
pub const M3D_ERR_UNKVOX: i32 = -71;
pub const M3D_ERR_TRUNC: i32 = -72;
pub const M3D_ERR_CMAP: i32 = -73;
pub const M3D_ERR_TMAP: i32 = -74;
pub const M3D_ERR_VRTS: i32 = -75;
pub const M3D_ERR_BONE: i32 = -76;
pub const M3D_ERR_MTRL: i32 = -77;
pub const M3D_ERR_SHPE: i32 = -78;
pub const M3D_ERR_VOXT: i32 = -79;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type M3D_FLOAT = f32;
pub type M3D_INDEX = u32;
pub type M3D_VOXEL = u16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct m3dhdr_t {
    pub magic: [::std::os::raw::c_char; 4usize],
    pub length: u32,
    pub scale: f32,
    pub types: u32,
}
#[test]
fn bindgen_test_layout_m3dhdr_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dhdr_t>(),
        16usize,
        concat!("Size of: ", stringify!(m3dhdr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dhdr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(m3dhdr_t))
    );
    fn test_field_magic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dhdr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dhdr_t),
                "::",
                stringify!(magic)
            )
        );
    }
    test_field_magic();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dhdr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dhdr_t),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dhdr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dhdr_t),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_types() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dhdr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dhdr_t),
                "::",
                stringify!(types)
            )
        );
    }
    test_field_types();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct m3dchunk_t {
    pub magic: [::std::os::raw::c_char; 4usize],
    pub length: u32,
}
#[test]
fn bindgen_test_layout_m3dchunk_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dchunk_t>(),
        8usize,
        concat!("Size of: ", stringify!(m3dchunk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dchunk_t>(),
        1usize,
        concat!("Alignment of ", stringify!(m3dchunk_t))
    );
    fn test_field_magic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dchunk_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dchunk_t),
                "::",
                stringify!(magic)
            )
        );
    }
    test_field_magic();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dchunk_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dchunk_t),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
}
#[doc = " in-memory model structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dti_t {
    pub u: M3D_FLOAT,
    pub v: M3D_FLOAT,
}
#[test]
fn bindgen_test_layout_m3dti_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dti_t>(),
        8usize,
        concat!("Size of: ", stringify!(m3dti_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dti_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3dti_t))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dti_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dti_t),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dti_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dti_t),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dtx_t {
    pub name: *mut ::std::os::raw::c_char,
    pub d: *mut u8,
    pub w: u16,
    pub h: u16,
    pub f: u8,
}
#[test]
fn bindgen_test_layout_m3dtx_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dtx_t>(),
        24usize,
        concat!("Size of: ", stringify!(m3dtx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dtx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dtx_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtx_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_d() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtx_t),
                "::",
                stringify!(d)
            )
        );
    }
    test_field_d();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtx_t),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtx_t),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtx_t),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dw_t {
    pub vertexid: M3D_INDEX,
    pub weight: M3D_FLOAT,
}
#[test]
fn bindgen_test_layout_m3dw_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dw_t>(),
        8usize,
        concat!("Size of: ", stringify!(m3dw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dw_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3dw_t))
    );
    fn test_field_vertexid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dw_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertexid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dw_t),
                "::",
                stringify!(vertexid)
            )
        );
    }
    test_field_vertexid();
    fn test_field_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dw_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dw_t),
                "::",
                stringify!(weight)
            )
        );
    }
    test_field_weight();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3db_t {
    pub parent: M3D_INDEX,
    pub name: *mut ::std::os::raw::c_char,
    pub pos: M3D_INDEX,
    pub ori: M3D_INDEX,
    pub numweight: M3D_INDEX,
    pub weight: *mut m3dw_t,
    pub mat4: [M3D_FLOAT; 16usize],
}
#[test]
fn bindgen_test_layout_m3db_t() {
    assert_eq!(
        ::std::mem::size_of::<m3db_t>(),
        104usize,
        concat!("Size of: ", stringify!(m3db_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3db_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3db_t))
    );
    fn test_field_parent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(parent)
            )
        );
    }
    test_field_parent();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_ori() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ori) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(ori)
            )
        );
    }
    test_field_ori();
    fn test_field_numweight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numweight) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(numweight)
            )
        );
    }
    test_field_numweight();
    fn test_field_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(weight)
            )
        );
    }
    test_field_weight();
    fn test_field_mat4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3db_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat4) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(m3db_t),
                "::",
                stringify!(mat4)
            )
        );
    }
    test_field_mat4();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3ds_t {
    pub boneid: [M3D_INDEX; 4usize],
    pub weight: [M3D_FLOAT; 4usize],
}
#[test]
fn bindgen_test_layout_m3ds_t() {
    assert_eq!(
        ::std::mem::size_of::<m3ds_t>(),
        32usize,
        concat!("Size of: ", stringify!(m3ds_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3ds_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3ds_t))
    );
    fn test_field_boneid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3ds_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).boneid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3ds_t),
                "::",
                stringify!(boneid)
            )
        );
    }
    test_field_boneid();
    fn test_field_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3ds_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3ds_t),
                "::",
                stringify!(weight)
            )
        );
    }
    test_field_weight();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dv_t {
    pub x: M3D_FLOAT,
    pub y: M3D_FLOAT,
    pub z: M3D_FLOAT,
    pub w: M3D_FLOAT,
    pub color: u32,
    pub skinid: M3D_INDEX,
}
#[test]
fn bindgen_test_layout_m3dv_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dv_t>(),
        24usize,
        concat!("Size of: ", stringify!(m3dv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3dv_t))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(m3dv_t), "::", stringify!(x))
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(m3dv_t), "::", stringify!(y))
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(m3dv_t), "::", stringify!(z))
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!("Offset of field: ", stringify!(m3dv_t), "::", stringify!(w))
        );
    }
    test_field_w();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dv_t),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_skinid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dv_t),
                "::",
                stringify!(skinid)
            )
        );
    }
    test_field_skinid();
}
pub const m3dpf_color: _bindgen_ty_1 = 0;
pub const m3dpf_uint8: _bindgen_ty_1 = 1;
pub const m3dpf_uint16: _bindgen_ty_1 = 2;
pub const m3dpf_uint32: _bindgen_ty_1 = 3;
pub const m3dpf_float: _bindgen_ty_1 = 4;
pub const m3dpf_map: _bindgen_ty_1 = 5;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dpd_t {
    pub format: u8,
    pub id: u8,
}
#[test]
fn bindgen_test_layout_m3dpd_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dpd_t>(),
        2usize,
        concat!("Size of: ", stringify!(m3dpd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dpd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(m3dpd_t))
    );
    fn test_field_format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dpd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dpd_t),
                "::",
                stringify!(format)
            )
        );
    }
    test_field_format();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dpd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dpd_t),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
}
pub const m3dp_Kd: _bindgen_ty_2 = 0;
pub const m3dp_Ka: _bindgen_ty_2 = 1;
pub const m3dp_Ks: _bindgen_ty_2 = 2;
pub const m3dp_Ns: _bindgen_ty_2 = 3;
pub const m3dp_Ke: _bindgen_ty_2 = 4;
pub const m3dp_Tf: _bindgen_ty_2 = 5;
pub const m3dp_Km: _bindgen_ty_2 = 6;
pub const m3dp_d: _bindgen_ty_2 = 7;
pub const m3dp_il: _bindgen_ty_2 = 8;
pub const m3dp_Pr: _bindgen_ty_2 = 64;
pub const m3dp_Pm: _bindgen_ty_2 = 65;
pub const m3dp_Ps: _bindgen_ty_2 = 66;
pub const m3dp_Ni: _bindgen_ty_2 = 67;
pub const m3dp_Nt: _bindgen_ty_2 = 68;
pub const m3dp_map_Kd: _bindgen_ty_2 = 128;
pub const m3dp_map_Ka: _bindgen_ty_2 = 129;
pub const m3dp_map_Ks: _bindgen_ty_2 = 130;
pub const m3dp_map_Ns: _bindgen_ty_2 = 131;
pub const m3dp_map_Ke: _bindgen_ty_2 = 132;
pub const m3dp_map_Tf: _bindgen_ty_2 = 133;
pub const m3dp_map_Km: _bindgen_ty_2 = 134;
pub const m3dp_map_D: _bindgen_ty_2 = 135;
pub const m3dp_map_N: _bindgen_ty_2 = 136;
pub const m3dp_map_Pr: _bindgen_ty_2 = 192;
pub const m3dp_map_Pm: _bindgen_ty_2 = 193;
pub const m3dp_map_Ps: _bindgen_ty_2 = 194;
pub const m3dp_map_Ni: _bindgen_ty_2 = 195;
pub const m3dp_map_Nt: _bindgen_ty_2 = 196;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const m3dp_bump: _bindgen_ty_3 = 134;
pub const m3dp_map_il: _bindgen_ty_3 = 136;
pub const m3dp_refl: _bindgen_ty_3 = 193;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m3dp_t {
    pub type_: u8,
    pub value: m3dp_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m3dp_t__bindgen_ty_1 {
    pub color: u32,
    pub num: u32,
    pub fnum: f32,
    pub textureid: M3D_INDEX,
}
#[test]
fn bindgen_test_layout_m3dp_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<m3dp_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(m3dp_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dp_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(m3dp_t__bindgen_ty_1))
    );
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dp_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dp_t__bindgen_ty_1),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dp_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dp_t__bindgen_ty_1),
                "::",
                stringify!(num)
            )
        );
    }
    test_field_num();
    fn test_field_fnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dp_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fnum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dp_t__bindgen_ty_1),
                "::",
                stringify!(fnum)
            )
        );
    }
    test_field_fnum();
    fn test_field_textureid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dp_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).textureid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dp_t__bindgen_ty_1),
                "::",
                stringify!(textureid)
            )
        );
    }
    test_field_textureid();
}
#[test]
fn bindgen_test_layout_m3dp_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dp_t>(),
        8usize,
        concat!("Size of: ", stringify!(m3dp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dp_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3dp_t))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dp_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dp_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dp_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dp_t),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dm_t {
    pub name: *mut ::std::os::raw::c_char,
    pub numprop: u8,
    pub prop: *mut m3dp_t,
}
#[test]
fn bindgen_test_layout_m3dm_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dm_t>(),
        24usize,
        concat!("Size of: ", stringify!(m3dm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dm_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dm_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dm_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dm_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_numprop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dm_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numprop) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dm_t),
                "::",
                stringify!(numprop)
            )
        );
    }
    test_field_numprop();
    fn test_field_prop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dm_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dm_t),
                "::",
                stringify!(prop)
            )
        );
    }
    test_field_prop();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3df_t {
    pub materialid: M3D_INDEX,
    pub vertex: [M3D_INDEX; 3usize],
    pub normal: [M3D_INDEX; 3usize],
    pub texcoord: [M3D_INDEX; 3usize],
}
#[test]
fn bindgen_test_layout_m3df_t() {
    assert_eq!(
        ::std::mem::size_of::<m3df_t>(),
        40usize,
        concat!("Size of: ", stringify!(m3df_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3df_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3df_t))
    );
    fn test_field_materialid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3df_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).materialid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3df_t),
                "::",
                stringify!(materialid)
            )
        );
    }
    test_field_materialid();
    fn test_field_vertex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3df_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3df_t),
                "::",
                stringify!(vertex)
            )
        );
    }
    test_field_vertex();
    fn test_field_normal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3df_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3df_t),
                "::",
                stringify!(normal)
            )
        );
    }
    test_field_normal();
    fn test_field_texcoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3df_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texcoord) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(m3df_t),
                "::",
                stringify!(texcoord)
            )
        );
    }
    test_field_texcoord();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dvi_t {
    pub count: u16,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_m3dvi_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dvi_t>(),
        16usize,
        concat!("Size of: ", stringify!(m3dvi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dvi_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dvi_t))
    );
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvi_t),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvi_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dvt_t {
    pub name: *mut ::std::os::raw::c_char,
    pub rotation: u8,
    pub voxshape: u16,
    pub materialid: M3D_INDEX,
    pub color: u32,
    pub skinid: M3D_INDEX,
    pub numitem: u8,
    pub item: *mut m3dvi_t,
}
#[test]
fn bindgen_test_layout_m3dvt_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dvt_t>(),
        40usize,
        concat!("Size of: ", stringify!(m3dvt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dvt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dvt_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_rotation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(rotation)
            )
        );
    }
    test_field_rotation();
    fn test_field_voxshape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).voxshape) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(voxshape)
            )
        );
    }
    test_field_voxshape();
    fn test_field_materialid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).materialid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(materialid)
            )
        );
    }
    test_field_materialid();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_skinid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(skinid)
            )
        );
    }
    test_field_skinid();
    fn test_field_numitem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numitem) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(numitem)
            )
        );
    }
    test_field_numitem();
    fn test_field_item() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).item) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvt_t),
                "::",
                stringify!(item)
            )
        );
    }
    test_field_item();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dvx_t {
    pub name: *mut ::std::os::raw::c_char,
    pub x: i32,
    pub y: i32,
    pub z: i32,
    pub w: u32,
    pub h: u32,
    pub d: u32,
    pub uncertain: u8,
    pub groupid: u8,
    pub data: *mut M3D_VOXEL,
}
#[test]
fn bindgen_test_layout_m3dvx_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dvx_t>(),
        48usize,
        concat!("Size of: ", stringify!(m3dvx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dvx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dvx_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_d() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(d)
            )
        );
    }
    test_field_d();
    fn test_field_uncertain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uncertain) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(uncertain)
            )
        );
    }
    test_field_uncertain();
    fn test_field_groupid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).groupid) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(groupid)
            )
        );
    }
    test_field_groupid();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dvx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dvx_t),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
pub const m3dc_use: _bindgen_ty_4 = 0;
pub const m3dc_inc: _bindgen_ty_4 = 1;
pub const m3dc_mesh: _bindgen_ty_4 = 2;
pub const m3dc_div: _bindgen_ty_4 = 3;
pub const m3dc_sub: _bindgen_ty_4 = 4;
pub const m3dc_len: _bindgen_ty_4 = 5;
pub const m3dc_dist: _bindgen_ty_4 = 6;
pub const m3dc_degu: _bindgen_ty_4 = 7;
pub const m3dc_deg: _bindgen_ty_4 = 8;
pub const m3dc_rangeu: _bindgen_ty_4 = 9;
pub const m3dc_range: _bindgen_ty_4 = 10;
pub const m3dc_paru: _bindgen_ty_4 = 11;
pub const m3dc_parv: _bindgen_ty_4 = 12;
pub const m3dc_trim: _bindgen_ty_4 = 13;
pub const m3dc_hole: _bindgen_ty_4 = 14;
pub const m3dc_scrv: _bindgen_ty_4 = 15;
pub const m3dc_sp: _bindgen_ty_4 = 16;
pub const m3dc_bez1: _bindgen_ty_4 = 17;
pub const m3dc_bsp1: _bindgen_ty_4 = 18;
pub const m3dc_bez2: _bindgen_ty_4 = 19;
pub const m3dc_bsp2: _bindgen_ty_4 = 20;
pub const m3dc_bezun: _bindgen_ty_4 = 21;
pub const m3dc_bezu: _bindgen_ty_4 = 22;
pub const m3dc_bezn: _bindgen_ty_4 = 23;
pub const m3dc_bez: _bindgen_ty_4 = 24;
pub const m3dc_nurbsun: _bindgen_ty_4 = 25;
pub const m3dc_nurbsu: _bindgen_ty_4 = 26;
pub const m3dc_nurbsn: _bindgen_ty_4 = 27;
pub const m3dc_nurbs: _bindgen_ty_4 = 28;
pub const m3dc_conn: _bindgen_ty_4 = 29;
pub const m3dc_line: _bindgen_ty_4 = 30;
pub const m3dc_polygon: _bindgen_ty_4 = 31;
pub const m3dc_circle: _bindgen_ty_4 = 32;
pub const m3dc_cylinder: _bindgen_ty_4 = 33;
pub const m3dc_shpere: _bindgen_ty_4 = 34;
pub const m3dc_torus: _bindgen_ty_4 = 35;
pub const m3dc_cone: _bindgen_ty_4 = 36;
pub const m3dc_cube: _bindgen_ty_4 = 37;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const m3dcp_mi_t: _bindgen_ty_5 = 1;
pub const m3dcp_hi_t: _bindgen_ty_5 = 2;
pub const m3dcp_fi_t: _bindgen_ty_5 = 3;
pub const m3dcp_ti_t: _bindgen_ty_5 = 4;
pub const m3dcp_vi_t: _bindgen_ty_5 = 5;
pub const m3dcp_qi_t: _bindgen_ty_5 = 6;
pub const m3dcp_vc_t: _bindgen_ty_5 = 7;
pub const m3dcp_i1_t: _bindgen_ty_5 = 8;
pub const m3dcp_i2_t: _bindgen_ty_5 = 9;
pub const m3dcp_i4_t: _bindgen_ty_5 = 10;
pub const m3dcp_va_t: _bindgen_ty_5 = 11;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dcd_t {
    pub p: u8,
    pub a: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_m3dcd_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dcd_t>(),
        9usize,
        concat!("Size of: ", stringify!(m3dcd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dcd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(m3dcd_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dcd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dcd_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dcd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dcd_t),
                "::",
                stringify!(a)
            )
        );
    }
    test_field_a();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dc_t {
    pub type_: u16,
    pub arg: *mut u32,
}
#[test]
fn bindgen_test_layout_m3dc_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dc_t>(),
        16usize,
        concat!("Size of: ", stringify!(m3dc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dc_t))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dc_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dc_t),
                "::",
                stringify!(arg)
            )
        );
    }
    test_field_arg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dh_t {
    pub name: *mut ::std::os::raw::c_char,
    pub group: M3D_INDEX,
    pub numcmd: u32,
    pub cmd: *mut m3dc_t,
}
#[test]
fn bindgen_test_layout_m3dh_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dh_t>(),
        24usize,
        concat!("Size of: ", stringify!(m3dh_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dh_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dh_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dh_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dh_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dh_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dh_t),
                "::",
                stringify!(group)
            )
        );
    }
    test_field_group();
    fn test_field_numcmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dh_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numcmd) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dh_t),
                "::",
                stringify!(numcmd)
            )
        );
    }
    test_field_numcmd();
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dh_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dh_t),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dl_t {
    pub name: *mut ::std::os::raw::c_char,
    pub lang: *mut ::std::os::raw::c_char,
    pub text: *mut ::std::os::raw::c_char,
    pub color: u32,
    pub vertexid: M3D_INDEX,
}
#[test]
fn bindgen_test_layout_m3dl_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dl_t>(),
        32usize,
        concat!("Size of: ", stringify!(m3dl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dl_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dl_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_lang() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lang) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dl_t),
                "::",
                stringify!(lang)
            )
        );
    }
    test_field_lang();
    fn test_field_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dl_t),
                "::",
                stringify!(text)
            )
        );
    }
    test_field_text();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dl_t),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_vertexid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertexid) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dl_t),
                "::",
                stringify!(vertexid)
            )
        );
    }
    test_field_vertexid();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dtr_t {
    pub boneid: M3D_INDEX,
    pub pos: M3D_INDEX,
    pub ori: M3D_INDEX,
}
#[test]
fn bindgen_test_layout_m3dtr_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dtr_t>(),
        12usize,
        concat!("Size of: ", stringify!(m3dtr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dtr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(m3dtr_t))
    );
    fn test_field_boneid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).boneid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtr_t),
                "::",
                stringify!(boneid)
            )
        );
    }
    test_field_boneid();
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtr_t),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_ori() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dtr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ori) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dtr_t),
                "::",
                stringify!(ori)
            )
        );
    }
    test_field_ori();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3dfr_t {
    pub msec: u32,
    pub numtransform: M3D_INDEX,
    pub transform: *mut m3dtr_t,
}
#[test]
fn bindgen_test_layout_m3dfr_t() {
    assert_eq!(
        ::std::mem::size_of::<m3dfr_t>(),
        16usize,
        concat!("Size of: ", stringify!(m3dfr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3dfr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3dfr_t))
    );
    fn test_field_msec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dfr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dfr_t),
                "::",
                stringify!(msec)
            )
        );
    }
    test_field_msec();
    fn test_field_numtransform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dfr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numtransform) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dfr_t),
                "::",
                stringify!(numtransform)
            )
        );
    }
    test_field_numtransform();
    fn test_field_transform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3dfr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3dfr_t),
                "::",
                stringify!(transform)
            )
        );
    }
    test_field_transform();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3da_t {
    pub name: *mut ::std::os::raw::c_char,
    pub durationmsec: u32,
    pub numframe: M3D_INDEX,
    pub frame: *mut m3dfr_t,
}
#[test]
fn bindgen_test_layout_m3da_t() {
    assert_eq!(
        ::std::mem::size_of::<m3da_t>(),
        24usize,
        concat!("Size of: ", stringify!(m3da_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3da_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3da_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3da_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3da_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_durationmsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3da_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).durationmsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3da_t),
                "::",
                stringify!(durationmsec)
            )
        );
    }
    test_field_durationmsec();
    fn test_field_numframe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3da_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numframe) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(m3da_t),
                "::",
                stringify!(numframe)
            )
        );
    }
    test_field_numframe();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3da_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3da_t),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3di_t {
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut u8,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_m3di_t() {
    assert_eq!(
        ::std::mem::size_of::<m3di_t>(),
        24usize,
        concat!("Size of: ", stringify!(m3di_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3di_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3di_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3di_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3di_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3di_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3di_t),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3di_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3di_t),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3d_t {
    pub raw: *mut m3dhdr_t,
    pub flags: ::std::os::raw::c_char,
    pub errcode: ::std::os::raw::c_schar,
    pub vc_s: ::std::os::raw::c_char,
    pub vi_s: ::std::os::raw::c_char,
    pub si_s: ::std::os::raw::c_char,
    pub ci_s: ::std::os::raw::c_char,
    pub ti_s: ::std::os::raw::c_char,
    pub bi_s: ::std::os::raw::c_char,
    pub nb_s: ::std::os::raw::c_char,
    pub sk_s: ::std::os::raw::c_char,
    pub fc_s: ::std::os::raw::c_char,
    pub hi_s: ::std::os::raw::c_char,
    pub fi_s: ::std::os::raw::c_char,
    pub vd_s: ::std::os::raw::c_char,
    pub vp_s: ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub scale: M3D_FLOAT,
    pub numcmap: M3D_INDEX,
    pub cmap: *mut u32,
    pub numtmap: M3D_INDEX,
    pub tmap: *mut m3dti_t,
    pub numtexture: M3D_INDEX,
    pub texture: *mut m3dtx_t,
    pub numbone: M3D_INDEX,
    pub bone: *mut m3db_t,
    pub numvertex: M3D_INDEX,
    pub vertex: *mut m3dv_t,
    pub numskin: M3D_INDEX,
    pub skin: *mut m3ds_t,
    pub nummaterial: M3D_INDEX,
    pub material: *mut m3dm_t,
    pub numface: M3D_INDEX,
    pub face: *mut m3df_t,
    pub numvoxtype: M3D_INDEX,
    pub voxtype: *mut m3dvt_t,
    pub numvoxel: M3D_INDEX,
    pub voxel: *mut m3dvx_t,
    pub numshape: M3D_INDEX,
    pub shape: *mut m3dh_t,
    pub numlabel: M3D_INDEX,
    pub label: *mut m3dl_t,
    pub numaction: M3D_INDEX,
    pub action: *mut m3da_t,
    pub numinlined: M3D_INDEX,
    pub inlined: *mut m3di_t,
    pub numextra: M3D_INDEX,
    pub extra: *mut *mut m3dchunk_t,
    pub preview: m3di_t,
}
#[test]
fn bindgen_test_layout_m3d_t() {
    assert_eq!(
        ::std::mem::size_of::<m3d_t>(),
        320usize,
        concat!("Size of: ", stringify!(m3d_t))
    );
    assert_eq!(
        ::std::mem::align_of::<m3d_t>(),
        8usize,
        concat!("Alignment of ", stringify!(m3d_t))
    );
    fn test_field_raw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(raw)
            )
        );
    }
    test_field_raw();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_errcode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errcode) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(errcode)
            )
        );
    }
    test_field_errcode();
    fn test_field_vc_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vc_s) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(vc_s)
            )
        );
    }
    test_field_vc_s();
    fn test_field_vi_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vi_s) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(vi_s)
            )
        );
    }
    test_field_vi_s();
    fn test_field_si_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_s) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(si_s)
            )
        );
    }
    test_field_si_s();
    fn test_field_ci_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ci_s) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(ci_s)
            )
        );
    }
    test_field_ci_s();
    fn test_field_ti_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ti_s) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(ti_s)
            )
        );
    }
    test_field_ti_s();
    fn test_field_bi_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bi_s) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(bi_s)
            )
        );
    }
    test_field_bi_s();
    fn test_field_nb_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_s) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(nb_s)
            )
        );
    }
    test_field_nb_s();
    fn test_field_sk_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sk_s) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(sk_s)
            )
        );
    }
    test_field_sk_s();
    fn test_field_fc_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fc_s) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(fc_s)
            )
        );
    }
    test_field_fc_s();
    fn test_field_hi_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi_s) as usize - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(hi_s)
            )
        );
    }
    test_field_hi_s();
    fn test_field_fi_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fi_s) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(fi_s)
            )
        );
    }
    test_field_fi_s();
    fn test_field_vd_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vd_s) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(vd_s)
            )
        );
    }
    test_field_vd_s();
    fn test_field_vp_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vp_s) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(vp_s)
            )
        );
    }
    test_field_vp_s();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_license() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).license) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(license)
            )
        );
    }
    test_field_license();
    fn test_field_author() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).author) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(author)
            )
        );
    }
    test_field_author();
    fn test_field_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(desc)
            )
        );
    }
    test_field_desc();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_numcmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numcmap) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numcmap)
            )
        );
    }
    test_field_numcmap();
    fn test_field_cmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmap) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(cmap)
            )
        );
    }
    test_field_cmap();
    fn test_field_numtmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numtmap) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numtmap)
            )
        );
    }
    test_field_numtmap();
    fn test_field_tmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tmap) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(tmap)
            )
        );
    }
    test_field_tmap();
    fn test_field_numtexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numtexture) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numtexture)
            )
        );
    }
    test_field_numtexture();
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_numbone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numbone) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numbone)
            )
        );
    }
    test_field_numbone();
    fn test_field_bone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bone) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(bone)
            )
        );
    }
    test_field_bone();
    fn test_field_numvertex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numvertex) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numvertex)
            )
        );
    }
    test_field_numvertex();
    fn test_field_vertex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(vertex)
            )
        );
    }
    test_field_vertex();
    fn test_field_numskin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numskin) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numskin)
            )
        );
    }
    test_field_numskin();
    fn test_field_skin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(skin)
            )
        );
    }
    test_field_skin();
    fn test_field_nummaterial() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nummaterial) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(nummaterial)
            )
        );
    }
    test_field_nummaterial();
    fn test_field_material() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).material) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(material)
            )
        );
    }
    test_field_material();
    fn test_field_numface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numface) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numface)
            )
        );
    }
    test_field_numface();
    fn test_field_face() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).face) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(face)
            )
        );
    }
    test_field_face();
    fn test_field_numvoxtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numvoxtype) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numvoxtype)
            )
        );
    }
    test_field_numvoxtype();
    fn test_field_voxtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).voxtype) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(voxtype)
            )
        );
    }
    test_field_voxtype();
    fn test_field_numvoxel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numvoxel) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numvoxel)
            )
        );
    }
    test_field_numvoxel();
    fn test_field_voxel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).voxel) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(voxel)
            )
        );
    }
    test_field_voxel();
    fn test_field_numshape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numshape) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numshape)
            )
        );
    }
    test_field_numshape();
    fn test_field_shape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shape) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(shape)
            )
        );
    }
    test_field_shape();
    fn test_field_numlabel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numlabel) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numlabel)
            )
        );
    }
    test_field_numlabel();
    fn test_field_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(label)
            )
        );
    }
    test_field_label();
    fn test_field_numaction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numaction) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numaction)
            )
        );
    }
    test_field_numaction();
    fn test_field_action() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(action)
            )
        );
    }
    test_field_action();
    fn test_field_numinlined() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numinlined) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numinlined)
            )
        );
    }
    test_field_numinlined();
    fn test_field_inlined() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inlined) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(inlined)
            )
        );
    }
    test_field_inlined();
    fn test_field_numextra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numextra) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(numextra)
            )
        );
    }
    test_field_numextra();
    fn test_field_extra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(extra)
            )
        );
    }
    test_field_extra();
    fn test_field_preview() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<m3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preview) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(m3d_t),
                "::",
                stringify!(preview)
            )
        );
    }
    test_field_preview();
}
pub type m3dread_t = ::std::option::Option<
    unsafe extern "C" fn(
        filename: *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_uchar,
>;
pub type m3dfree_t =
    ::std::option::Option<unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_void)>;
pub type m3dtxsc_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        script: *const ::std::os::raw::c_void,
        len: u32,
        output: *mut m3dtx_t,
    ) -> ::std::os::raw::c_int,
>;
pub type m3dprsc_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        script: *const ::std::os::raw::c_void,
        len: u32,
        model: *mut m3d_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " C prototypes"]
    pub fn m3d_load(
        data: *mut ::std::os::raw::c_uchar,
        readfilecb: m3dread_t,
        freecb: m3dfree_t,
        mtllib: *mut m3d_t,
    ) -> *mut m3d_t;
}
extern "C" {
    pub fn m3d_save(
        model: *mut m3d_t,
        quality: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn m3d_free(model: *mut m3d_t);
}
extern "C" {
    pub fn m3d_frame(
        model: *mut m3d_t,
        actionid: M3D_INDEX,
        frameid: M3D_INDEX,
        skeleton: *mut m3dtr_t,
    ) -> *mut m3dtr_t;
}
extern "C" {
    pub fn m3d_pose(model: *mut m3d_t, actionid: M3D_INDEX, msec: u32) -> *mut m3db_t;
}
extern "C" {
    pub fn _m3d_safestr(
        in_: *mut ::std::os::raw::c_char,
        morelines: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
